<?php

namespace Beacode\CoreBundle\Repository;
use Beacode\CoreBundle\Entity\Interest;
use Doctrine\ORM\EntityRepository;

/**
 * InterestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InterestRepository extends EntityRepository {

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return Interest|int|null|object
     */
    public function createInterest($data) {
        $object = $this->getInterest($data);
        if (!empty($object)) return 0;

        $object = new Interest();
        $data['systemCreated'] = new \DateTime();
        $object = $this->getInterestObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param Interest|null $object
     * @return Interest|int|null|object
     */
    public function editInterest($data, Interest $object=null) {
        if (empty($object)) {
            $object = $this->getInterest($data);
            if (empty($object)) return 0;
        }

        $object = $this->getInterestObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return Interest|int|null|object
     */
    public function upsertInterest($data) {
        $object = $this->getInterest($data);
        if (empty($object)) {
            $object = $this->createInterest($data);
        } else {
            $object = $this->editInterest($data, $object);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param Interest|null $object
     * @return int
     */
    public function removeInterest($data, Interest $object=null) {
        if (empty($object)) {
            $object = $this->getInterest($data);
            if (empty($object)) return 0;
        }

        $this->_em->remove($object);

        $this->_em->flush();

        return 1;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return null|object
     */
    public function getInterest($data) {
        $object = null;

        if (!empty($data['id'])) {
            $object = $this->findOneBy(['id'=>$data['id']]);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param Interest $object
     * @param $data
     * @return Interest
     */
    private function getInterestObjectFromData(Interest $object, $data) {
        if (!empty($data['userId'])) $object->setUserId($data['userId']);
        if (!empty($data['name'])) $object->setName($data['name']);
        if (!empty($data['systemCreated'])) $object->setSystemCreated($data['systemCreated']);

        $this->_em->persist($object);

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param Interest $object
     * @param $forFunction
     * @return array
     */
    public function getInterestDataFromObject(Interest $object, $forFunction) {
        $whichData = [];
        if ($forFunction == 1) $whichData = [1];

        $data = [];
        if (in_array(1, $whichData)) {
            $data['id'] = $object->getId();
        }
        if (in_array(2, $whichData)) {
            $data['userId'] = $object->getUserId();
            $data['name'] = $object->getName();
        }

        return $data;
    }
}
