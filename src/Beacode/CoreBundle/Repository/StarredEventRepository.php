<?php

namespace Beacode\CoreBundle\Repository;
use Beacode\CoreBundle\Entity\StarredEvent;
use Doctrine\ORM\EntityRepository;

/**
 * StarredEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StarredEventRepository extends EntityRepository {

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return StarredEvent|int|null|object
     */
    public function createStarredEvent($data) {
        $object = $this->getStarredEvent($data);
        if (!empty($object)) return 0;

        $object = new StarredEvent();
        $data['systemCreated'] = new \DateTime();
        $object = $this->getStarredEventObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param StarredEvent|null $object
     * @return StarredEvent|int|null|object
     */
    public function editStarredEvent($data, StarredEvent $object=null) {
        if (empty($object)) {
            $object = $this->getStarredEvent($data);
            if (empty($object)) return 0;
        }

        $object = $this->getStarredEventObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return StarredEvent|int|null|object
     */
    public function upsertStarredEvent($data) {
        $object = $this->getStarredEvent($data);
        if (empty($object)) {
            $object = $this->createStarredEvent($data);
        } else {
            $object = $this->editStarredEvent($data, $object);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param StarredEvent|null $object
     * @return int
     */
    public function removeStarredEvent($data, StarredEvent $object=null) {
        if (empty($object)) {
            $object = $this->getStarredEvent($data);
            if (empty($object)) return 0;
        }

        $this->_em->remove($object);

        $this->_em->flush();

        return 1;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return null|object
     */
    public function getStarredEvent($data) {
        $object = null;

        if (!empty($data['id'])) {
            $object = $this->findOneBy(['id'=>$data['id']]);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param StarredEvent $object
     * @param $data
     * @return StarredEvent
     */
    private function getStarredEventObjectFromData(StarredEvent $object, $data) {
        if (!empty($data['userId'])) $object->setUserId($data['userId']);
        if (!empty($data['eventId'])) $object->setEventId($data['eventId']);
        if (!empty($data['systemCreated'])) $object->setSystemCreated($data['systemCreated']);

        $this->_em->persist($object);

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param StarredEvent $object
     * @param $forFunction
     * @return array
     */
    public function getStarredEventDataFromObject(StarredEvent $object, $forFunction) {
        $whichData = [];
        if ($forFunction == 1) $whichData = [1];

        $data = [];
        if (in_array(1, $whichData)) {
            $data['id'] = $object->getId();
        }
        if (in_array(2, $whichData)) {
            $data['userId'] = $object->getUserId();
            $data['eventId'] = $object->getEventId();
        }

        return $data;
    }
}
