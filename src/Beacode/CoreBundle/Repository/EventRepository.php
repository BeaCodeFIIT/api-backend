<?php

namespace Beacode\CoreBundle\Repository;
use Beacode\CoreBundle\Entity\Event;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends CoreRepository {

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return Event|int|null|object
     */
    public function createEvent($data) {
        $object = new Event();
        $data['systemCreated'] = new \DateTime();
        $object = $this->getEventObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return Event|int|null|object
     */
    public function createIfNotExistEvent($data) {
        $object = $this->getEvent($data);
        if (empty($object)) {
            $object = $this->createEvent($data);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param Event|null $object
     * @return Event|int|null|object
     */
    public function editEvent($data, Event $object=null) {
        if (empty($object)) {
            $object = $this->getEvent($data);
            if (is_int($object)) return $object;
        }

        $object = $this->getEventObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return Event|int|null|object
     */
    public function upsertEvent($data) {
        $object = $this->getEvent($data);
        if (empty($object)) {
            $object = $this->createEvent($data);
        } else {
            $object = $this->editEvent($data, $object);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param Event|null $object
     * @return int
     */
    public function removeEvent($data, Event $object=null) {
        if (empty($object)) {
            $object = $this->getEvent($data);
            if (is_int($object)) return $object;
        }

        $this->_em->remove($object);

        $this->_em->flush();

        return 1;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return int|null|object
     */
    public function getEvent($data) {
        if (!empty($data['id'])) {
            $object = $this->findOneBy(['id'=>$data['id']]);
        }

        if (empty($object)) return 0;
        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param Event $object
     * @param $data
     * @return Event
     */
    private function getEventObjectFromData(Event $object, $data) {
        if (!empty($data['name'])) $object->setName($data['name']);
        if (!empty($data['start'])) $object->setStart($data['start']);
        if (!empty($data['end'])) $object->setEnd($data['end']);
        if (!empty($data['locationId'])) $object->setLocationId($data['locationId']);
        if (!empty($data['description'])) $object->setDescription($data['description']);
        if (!empty($data['systemCreated'])) $object->setSystemCreated($data['systemCreated']);
        if (!empty($data['creatorId'])) $object->setCreatorId($data['creatorId']);

        $this->_em->persist($object);

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param Event $object
     * @param $forFunction
     * @param array $dataIn
     * @return array|int
     */
    public function getEventDataFromObject(Event $object=null, $forFunction, $dataIn=[]) {
        if (empty($object)) {
            $object = $this->getEvent($dataIn);
            if (is_int($object)) return $object;
        }

        $whichData = [];
        if ($forFunction == 1) $whichData = [1, 2, 3, 4, 5];
        else if ($forFunction == 2) $whichData = [1];

        $data = [];
        if (in_array(1, $whichData)) {
            $data['id'] = $object->getId();
        }
        if (in_array(2, $whichData)) {
            $data['name'] = $object->getName();
        }
        if (in_array(3, $whichData)) {
            $data['start'] = $object->getStart()->format('d.m.Y H:i:s');
            $data['end'] = $object->getEnd()->format('d.m.Y H:i:s');
        }
        if (in_array(4, $whichData)) {
            $data['locationId'] = $object->getLocationId();
        }
        if (in_array(5, $whichData)) {
            $data['description'] = $object->getDescription();
        }
        if (in_array(6, $whichData)) {
            $data['creatorId'] = $object->getCreatorId();
        }

        return $data;
    }

    //******************************************************************************************************************

    private function getLocationDataFromId($data) {
        $locationData = $this->getRepo('Location')->getLocationDataFromObject(null, 1, ['id'=>$data['locationId']]);
        $data['location'] = (!is_int($locationData) ? $locationData : null);
        unset($data['locationId']);

        return $data;
    }

    //******************************************************************************************************************
    //******************************************************************************************************************

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return array
     */
    public function showEvents($data) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('i');
        $qb->from('BeacodeCoreBundle:Event', 'i');
        if (!empty($data['namePart'])) {
            $qb->where('i.name LIKE ?1');
            $qb->setParameter(1, $data['namePart'] . '%');
        }
        $qb->orderBy('i.name', 'ASC');
        $eventObjectArray = $qb->getQuery()->getResult();

        $eventDataArray = [];
        foreach ($eventObjectArray as $key=>$eventObject) {
            $eventDataArray[$key] = $this->getEventDataFromObject($eventObject, 1);
            $eventDataArray[$key] = $this->getLocationDataFromId($eventDataArray[$key]);
        }

        return ['result'=>1, 'data'=>$eventDataArray];
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return array
     */
    public function showCreatedEvents($data) {
        $eventObjectArray = $this->findBy(['creatorId'=>$data['creatorId']], ['name'=>'ASC']);

        $eventDataArray = [];
        foreach ($eventObjectArray as $key=>$eventObject) {
            $eventDataArray[$key] = $this->getEventDataFromObject($eventObject, 1);
            $eventDataArray[$key] = $this->getLocationDataFromId($eventDataArray[$key]);
        }

        return ['result'=>1, 'data'=>$eventDataArray];
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return array
     */
    public function saveEvent($data) {
        $data['start'] = new \DateTime($data['start']);
        $data['end'] = new \DateTime($data['end']);
        $eventObject = $this->createEvent($data);
        $eventData = $this->getEventDataFromObject($eventObject, 2);

        return ['result'=>1, 'data'=>$eventData];
    }
}
