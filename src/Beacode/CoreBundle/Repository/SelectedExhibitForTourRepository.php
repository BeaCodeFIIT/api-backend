<?php

namespace Beacode\CoreBundle\Repository;
use Beacode\CoreBundle\Entity\SelectedExhibitForTour;

/**
 * SelectedExhibitForTourRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SelectedExhibitForTourRepository extends CoreRepository {

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return SelectedExhibitForTour|int|null|object
     */
    public function createSelectedExhibitForTour($data) {
        $object = new SelectedExhibitForTour();
        $data['systemCreated'] = new \DateTime();
        $object = $this->getSelectedExhibitForTourObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return SelectedExhibitForTour|int|null|object
     */
    public function createIfNotExistSelectedExhibitForTour($data) {
        $object = $this->getSelectedExhibitForTour($data);
        if (empty($object)) {
            $object = $this->createSelectedExhibitForTour($data);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param SelectedExhibitForTour|null $object
     * @return SelectedExhibitForTour|int|null|object
     */
    public function editSelectedExhibitForTour($data, SelectedExhibitForTour $object=null) {
        if (empty($object)) {
            $object = $this->getSelectedExhibitForTour($data);
            if (is_int($object)) return $object;
        }

        $object = $this->getSelectedExhibitForTourObjectFromData($object, $data);

        $this->_em->flush();

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return SelectedExhibitForTour|int|null|object
     */
    public function upsertSelectedExhibitForTour($data) {
        $object = $this->getSelectedExhibitForTour($data);
        if (empty($object)) {
            $object = $this->createSelectedExhibitForTour($data);
        } else {
            $object = $this->editSelectedExhibitForTour($data, $object);
        }

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @param SelectedExhibitForTour|null $object
     * @return int
     */
    public function removeSelectedExhibitForTour($data, SelectedExhibitForTour $object=null) {
        if (empty($object)) {
            $object = $this->getSelectedExhibitForTour($data);
            if (is_int($object)) return $object;
        }

        $this->_em->remove($object);

        $this->_em->flush();

        return 1;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return int|null|object
     */
    public function getSelectedExhibitForTour($data) {
        if (!empty($data['id'])) {
            $object = $this->findOneBy(['id'=>$data['id']]);
        } else if ((!empty($data['userId'])) && (!empty($data['eventId'])) && (!empty($data['exhibitId']))) {
            $object = $this->findOneBy(['userId'=>$data['userId'], 'eventId'=>$data['eventId'], 'exhibitId'=>$data['exhibitId']]);
        }

        if (empty($object)) return 0;
        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param SelectedExhibitForTour $object
     * @param $data
     * @return SelectedExhibitForTour
     */
    private function getSelectedExhibitForTourObjectFromData(SelectedExhibitForTour $object, $data) {
        if (!empty($data['userId'])) $object->setUserId($data['userId']);
        if (!empty($data['eventId'])) $object->setEventId($data['eventId']);
        if (!empty($data['exhibitId'])) $object->setExhibitId($data['exhibitId']);
        if (!empty($data['systemCreated'])) $object->setSystemCreated($data['systemCreated']);

        $this->_em->persist($object);

        return $object;
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param SelectedExhibitForTour $object
     * @param $forFunction
     * @param array $dataIn
     * @return array|int
     */
    public function getSelectedExhibitForTourDataFromObject(SelectedExhibitForTour $object=null, $forFunction, $dataIn=[]) {
        if (empty($object)) {
            $object = $this->getSelectedExhibitForTour($dataIn);
            if (is_int($object)) return $object;
        }

        $whichData = [];
        if ($forFunction == 1) $whichData = [1, 4];
        else if ($forFunction == 2) $whichData = [1];

        $data = [];
        if (in_array(1, $whichData)) {
            $data['id'] = $object->getId();
        }
        if (in_array(2, $whichData)) {
            $data['userId'] = $object->getUserId();
        }
        if (in_array(3, $whichData)) {
            $data['eventId'] = $object->getEventId();
        }
        if (in_array(4, $whichData)) {
            $data['exhibitId'] = $object->getExhibitId();
        }

        return $data;
    }

    //******************************************************************************************************************

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return mixed
     */
    private function getExhibitDataFromId($data) {
        $exhibitData = $this->getRepo('Exhibit')->getExhibitDataFromObject(null, 1, ['id'=>$data['exhibitId']]);
        $data['exhibit'] = (!is_int($exhibitData) ? $exhibitData : null);
        unset($data['exhibitId']);

        return $data;
    }

    //******************************************************************************************************************
    //******************************************************************************************************************

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return array
     */
    public function showAppEventsSelectedExhibitsForTour($data) {
        $selectedExhibitForTourObjectArray = $this->findBy(['userId'=>$data['userId'], 'eventId'=>$data['eventId']], ['systemCreated'=>'DESC']);

        $selectedExhibitForTourDataArray = [];
        foreach ($selectedExhibitForTourObjectArray as $key=>$selectedExhibitForTourObject) {
            $selectedExhibitForTourDataArray[$key] = $this->getSelectedExhibitForTourDataFromObject($selectedExhibitForTourObject, 1);
            $selectedExhibitForTourDataArray[$key] = $this->getExhibitDataFromId($selectedExhibitForTourDataArray[$key]);
        }

        return ['result'=>1, 'data'=>$selectedExhibitForTourDataArray];
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return array
     */
    public function saveAppEventsSelectedExhibitForTour($data) {
        $selectedExhibitForTourObject = $this->createSelectedExhibitForTour($data);

        $selectedExhibitForTourData = $this->getSelectedExhibitForTourDataFromObject($selectedExhibitForTourObject, 2);

        return ['result'=>1, 'data'=>$selectedExhibitForTourData];
    }

    /**
     * @author Juraj Flamik <juraj.flamik@gmail.com>
     * @param $data
     * @return array
     */
    public function deleteAppEventsSelectedExhibitForTour($data) {
        $selectedExhibitForTourObject = $this->getSelectedExhibitForTour($data);
        if (is_int($selectedExhibitForTourObject)) return ['result'=>$selectedExhibitForTourObject];

        $result = $this->removeSelectedExhibitForTour($data, $selectedExhibitForTourObject);

        return ['result'=>$result];
    }
}
